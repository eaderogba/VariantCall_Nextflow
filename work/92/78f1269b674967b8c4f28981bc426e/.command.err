Looking to launch executable "/home/eaderogba279/anaconda3/bin/bwa-mem2.avx2", simd = .avx2
Launching executable "/home/eaderogba279/anaconda3/bin/bwa-mem2.avx2"
-----------------------------
Executing in AVX2 mode!!
-----------------------------
* SA compression enabled with xfactor: 8
* Ref file: /home/eaderogba279/Bionformatics_Projects/VariantCall_Nextflow/reference/MN908947.fasta
* Entering FMI_search
* Index file found. Loading index from /home/eaderogba279/Bionformatics_Projects/VariantCall_Nextflow/reference/MN908947.fasta.bwt.2bit.64
* Reference seq len for bi-index = 59807
* sentinel-index: 17048
* Count:
0,	1
1,	18549
2,	29904
3,	41259
4,	59807

* Reading other elements of the index from files /home/eaderogba279/Bionformatics_Projects/VariantCall_Nextflow/reference/MN908947.fasta
* Index prefix: /home/eaderogba279/Bionformatics_Projects/VariantCall_Nextflow/reference/MN908947.fasta
* Read 0 ALT contigs
* Done reading Index!!
* Reading reference genome..
* Binary seq file = /home/eaderogba279/Bionformatics_Projects/VariantCall_Nextflow/reference/MN908947.fasta.0123
* Reference genome size: 59806 bp
* Done reading reference genome !!

------------------------------------------
1. Memory pre-allocation for Chaining: 139.3584 MB
2. Memory pre-allocation for BSW: 239.6170 MB
3. Memory pre-allocation for BWT: 77.3142 MB
------------------------------------------
* Threads used (compute): 1
* No. of pipeline threads: 2

[0000] read_chunk: 10000000, work_chunk_size: 10000257, nseq: 47732
	[0000][ M::kt_pipeline] read 47732 sequences (10000257 bp)...
[0000] Calling mem_process_seqs.., task: 0
[0000] 1. Calling kt_for - worker_bwt
[0000] read_chunk: 10000000, work_chunk_size: 10000022, nseq: 47642
	[0000][ M::kt_pipeline] read 47642 sequences (10000022 bp)...
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 29903, n: 47732
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (0, 23786, 54, 0)
[0000][PE] skip orientation FF as there are not enough pairs
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (385, 393, 404)
[0000][PE] low and high boundaries for computing mean and std.dev: (347, 442)
[0000][PE] mean and std.dev: (394.11, 9.92)
[0000][PE] low and high boundaries for proper pairs: (328, 461)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (237, 237, 237)
[0000][PE] low and high boundaries for computing mean and std.dev: (237, 237)
[0000][PE] mean and std.dev: (237.00, 0.00)
[0000][PE] low and high boundaries for proper pairs: (237, 237)
[0000][PE] skip orientation RR as there are not enough pairs
[0000][PE] skip orientation RF
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 47732 reads in 3.293 CPU sec, 4.297 real sec
[0000] Calling mem_process_seqs.., task: 1
[0000] 1. Calling kt_for - worker_bwt
[0000] read_chunk: 10000000, work_chunk_size: 10000354, nseq: 47468
	[0000][ M::kt_pipeline] read 47468 sequences (10000354 bp)...
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 29903, n: 47642
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (0, 23814, 0, 0)
[0000][PE] skip orientation FF as there are not enough pairs
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (382, 382, 394)
[0000][PE] low and high boundaries for computing mean and std.dev: (358, 418)
[0000][PE] mean and std.dev: (387.84, 8.94)
[0000][PE] low and high boundaries for proper pairs: (346, 430)
[0000][PE] skip orientation RF as there are not enough pairs
[0000][PE] skip orientation RR as there are not enough pairs
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 47642 reads in 3.509 CPU sec, 4.309 real sec
[0000] Calling mem_process_seqs.., task: 2
[0000] 1. Calling kt_for - worker_bwt
[0000] read_chunk: 10000000, work_chunk_size: 10000054, nseq: 47938
	[0000][ M::kt_pipeline] read 47938 sequences (10000054 bp)...
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 29903, n: 47468
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (0, 23654, 70, 0)
[0000][PE] skip orientation FF as there are not enough pairs
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (377, 392, 392)
[0000][PE] low and high boundaries for computing mean and std.dev: (347, 422)
[0000][PE] mean and std.dev: (386.13, 6.94)
[0000][PE] low and high boundaries for proper pairs: (332, 437)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (4991, 4991, 4991)
[0000][PE] low and high boundaries for computing mean and std.dev: (4991, 4991)
[0000][PE] mean and std.dev: (4991.00, 0.00)
[0000][PE] low and high boundaries for proper pairs: (4991, 4991)
[0000][PE] skip orientation RR as there are not enough pairs
[0000][PE] skip orientation RF
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 47468 reads in 3.375 CPU sec, 4.436 real sec
[0000] Calling mem_process_seqs.., task: 3
[0000] 1. Calling kt_for - worker_bwt
[0000] read_chunk: 10000000, work_chunk_size: 10000280, nseq: 47540
	[0000][ M::kt_pipeline] read 47540 sequences (10000280 bp)...
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 29903, n: 47938
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (0, 23908, 51, 0)
[0000][PE] skip orientation FF as there are not enough pairs
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (380, 388, 403)
[0000][PE] low and high boundaries for computing mean and std.dev: (334, 449)
[0000][PE] mean and std.dev: (392.59, 12.67)
[0000][PE] low and high boundaries for proper pairs: (311, 472)
[0000][PE] analyzing insert size distribution for orientation RF...
[0000][PE] (25, 50, 75) percentile: (8594, 8594, 8594)
[0000][PE] low and high boundaries for computing mean and std.dev: (8594, 8594)
[0000][PE] mean and std.dev: (8594.00, 0.00)
[0000][PE] low and high boundaries for proper pairs: (8594, 8594)
[0000][PE] skip orientation RR as there are not enough pairs
[0000][PE] skip orientation RF
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 47938 reads in 3.437 CPU sec, 4.287 real sec
[0000] Calling mem_process_seqs.., task: 4
[0000] 1. Calling kt_for - worker_bwt
[0000] read_chunk: 10000000, work_chunk_size: 10000116, nseq: 47848
	[0000][ M::kt_pipeline] read 47848 sequences (10000116 bp)...
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 29903, n: 47540
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (0, 23754, 0, 0)
[0000][PE] skip orientation FF as there are not enough pairs
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (382, 390, 399)
[0000][PE] low and high boundaries for computing mean and std.dev: (348, 433)
[0000][PE] mean and std.dev: (392.58, 11.42)
[0000][PE] low and high boundaries for proper pairs: (331, 450)
[0000][PE] skip orientation RF as there are not enough pairs
[0000][PE] skip orientation RR as there are not enough pairs
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 47540 reads in 3.248 CPU sec, 5.010 real sec
[0000] Calling mem_process_seqs.., task: 5
[0000] 1. Calling kt_for - worker_bwt
[0000] read_chunk: 10000000, work_chunk_size: 10000140, nseq: 47508
	[0000][ M::kt_pipeline] read 47508 sequences (10000140 bp)...
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 29903, n: 47848
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (0, 23903, 0, 0)
[0000][PE] skip orientation FF as there are not enough pairs
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (379, 379, 386)
[0000][PE] low and high boundaries for computing mean and std.dev: (365, 400)
[0000][PE] mean and std.dev: (382.21, 4.07)
[0000][PE] low and high boundaries for proper pairs: (358, 407)
[0000][PE] skip orientation RF as there are not enough pairs
[0000][PE] skip orientation RR as there are not enough pairs
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 47848 reads in 4.307 CPU sec, 4.626 real sec
[0000] Calling mem_process_seqs.., task: 6
[0000] 1. Calling kt_for - worker_bwt
[0000] read_chunk: 10000000, work_chunk_size: 10000006, nseq: 48444
	[0000][ M::kt_pipeline] read 48444 sequences (10000006 bp)...
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 29903, n: 47508
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (0, 23746, 0, 0)
[0000][PE] skip orientation FF as there are not enough pairs
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (386, 393, 393)
[0000][PE] low and high boundaries for computing mean and std.dev: (372, 407)
[0000][PE] mean and std.dev: (389.99, 7.37)
[0000][PE] low and high boundaries for proper pairs: (360, 419)
[0000][PE] skip orientation RF as there are not enough pairs
[0000][PE] skip orientation RR as there are not enough pairs
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 47508 reads in 3.715 CPU sec, 3.936 real sec
[0000] Calling mem_process_seqs.., task: 7
[0000] 1. Calling kt_for - worker_bwt
[0000] read_chunk: 10000000, work_chunk_size: 10000200, nseq: 47490
	[0000][ M::kt_pipeline] read 47490 sequences (10000200 bp)...
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 29903, n: 48444
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (0, 24213, 1, 0)
[0000][PE] skip orientation FF as there are not enough pairs
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (391, 392, 412)
[0000][PE] low and high boundaries for computing mean and std.dev: (349, 454)
[0000][PE] mean and std.dev: (394.84, 12.46)
[0000][PE] low and high boundaries for proper pairs: (328, 475)
[0000][PE] skip orientation RF as there are not enough pairs
[0000][PE] skip orientation RR as there are not enough pairs
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 48444 reads in 3.662 CPU sec, 3.777 real sec
[0000] Calling mem_process_seqs.., task: 8
[0000] 1. Calling kt_for - worker_bwt
[W::bseq_read_orig] the 2nd file has fewer sequences.
[0000] read_chunk: 10000000, work_chunk_size: 847385, nseq: 4050
	[0000][ M::kt_pipeline] read 4050 sequences (847385 bp)...
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 29903, n: 47490
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (0, 23734, 1, 0)
[0000][PE] skip orientation FF as there are not enough pairs
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (384, 384, 391)
[0000][PE] low and high boundaries for computing mean and std.dev: (370, 405)
[0000][PE] mean and std.dev: (385.06, 3.28)
[0000][PE] low and high boundaries for proper pairs: (363, 412)
[0000][PE] skip orientation RF as there are not enough pairs
[0000][PE] skip orientation RR as there are not enough pairs
[0000] 3. Calling kt_for - worker_sam
	[0000][ M::mem_process_seqs] Processed 47490 reads in 4.254 CPU sec, 4.911 real sec
[0000] Calling mem_process_seqs.., task: 9
[0000] 1. Calling kt_for - worker_bwt
[W::bseq_read_orig] the 2nd file has fewer sequences.
[0000] read_chunk: 10000000, work_chunk_size: 0, nseq: 0
[0000] 2. Calling kt_for - worker_aln
[0000] Inferring insert size distribution of PE reads from data, l_pac: 29903, n: 4050
[0000][PE] # candidate unique pairs for (FF, FR, RF, RR): (0, 2010, 0, 0)
[0000][PE] skip orientation FF as there are not enough pairs
[0000][PE] analyzing insert size distribution for orientation FR...
[0000][PE] (25, 50, 75) percentile: (379, 392, 404)
[0000][PE] low and high boundaries for computing mean and std.dev: (329, 454)
[0000][PE] mean and std.dev: (390.89, 10.91)
[0000][PE] low and high boundaries for proper pairs: (304, 479)
[0000][PE] skip orientation RF as there are not enough pairs
[0000][PE] skip orientation RR as there are not enough pairs
[0000] 3. Calling kt_for - worker_sam
[mem_sam_pe] paired reads have different names: "ERR5556343.216818", "ERR5556343.216844"

[bam_sort_core] merging from 0 files and 20 in-memory blocks...
